<?php

use Kirby\Cms\File;
use Kirby\Cms\FileVersion;
use Kirby\Http\Uri;
use Kirby\Toolkit\Str;

function cdn($file, $params = [])
{
	$query = null;

	// check the parameters passed to the function and set width and height
	if (empty($params) === false) {
		if (empty($params['crop']) === false && $params['crop'] !== false) {
			// use the width as height if the height is not set
			$params['height'] = $params['height'] ?? $params['width'];
		}
		// build the query
		$query = '?' . http_build_query($params);
	}

	// if $file is an object, resolve it to its media URL
	if (is_object($file) === true) {
		$file = $file->mediaUrl();
	}

	// set the path
	$path = Url::path($file);

	// return final URL
	return option('cdn.domain') . '/' . $path . $query;
}

Kirby::plugin('author/cdn', [
	'components' => [
		'url' => function ($kirby, $path, $options, $original) {

			static $original;

			if (Str::startsWith($path, 'assets')) {

				if (option('cdn', false) !== false) {
					return option('cdn.domain') . '/' . $path;
				}
			}

			if ($original === null) {
				$original = $kirby->nativeComponent('url');
			}

			return $original($kirby, $path, $options);
		},
		'file::version' => function (Kirby $kirby, File $file, array $options = []) {

			static $original;

			// if cdn option is enabled
			if (option('cdn', false) !== false) {
				$url = cdn($file, $options);
				// return a new FileVersion object with the given settings
				return new FileVersion([
					'modifications' => $options,
					'original'      => $file,
					'root'          => $file->root(),
					'url'           => $url,
				]);
			}

			// if static $original is null, get the original component
			if ($original === null) {
				$original = $kirby->nativeComponent('file::version');
			}

			// and return it with the given options
			return $original($kirby, $file, $options);
		},
		'file::url' => function (Kirby $kirby, File $file): string {

			static $original;

			// if the file type is an image
			if ($file->type() === 'image') {
				// call the cdn method
				return cdn($file);
			}

			// if static $original is null, get the original component
			if ($original === null) {
				$original = $kirby->nativeComponent('file::url');
			}

			// and return it with the given options
			return $original($kirby, $file);
		}
	]
]);